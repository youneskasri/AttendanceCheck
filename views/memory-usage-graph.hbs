<!DOCTYPE html>
<html>

    <head>
        <title>Memory Usage</title>
        {{> links}}
    </head>

    <body>
        {{> loadingSpinner}}
        {{> errorHandlers}}

        <div style="width:75%;">
            <canvas id="canvas"></canvas>
            <button id="pauseResume">Pause</button>
        </div>

        <script type="text/javascript" src="/javascripts/vendor/jquery-3.3.1.min.js"></script>
        <script type="text/javascript" src="/javascripts/vendor/moment.min.js"></script>
        <script src="http://www.chartjs.org/dist/2.7.2/Chart.js"></script>
        <script src="http://www.chartjs.org/samples/latest/utils.js"></script>

        <!-- Init Chart -->
        <script>

            let datasetRSS = {
                label: 'Resident Set Size',
                backgroundColor: window.chartColors.green,
                borderColor: window.chartColors.green,
                fill: false,
                pointRadius: 0,
                data: []
            };

            let datasetExternal = {
                label: 'External',
                backgroundColor: window.chartColors.yellow,
                borderColor: window.chartColors.yellow,
                fill: false,
                pointRadius: 0,
                data: []                
            }

            let datasetHeapUsed = {
                label: 'Heap Used',
                backgroundColor: window.chartColors.red,
                borderColor: window.chartColors.red,
                fill: false,
                data: [],
            };

            let datasetHeapTotal = {
                label: 'Heap Total',
                backgroundColor: window.chartColors.blue,
                borderColor: window.chartColors.blue,
                fill: false,
                pointRadius: 0,
                data: []
            };

            const xAxes = [{
                type: 'time',
                display: true,
                scaleLabel: {
                    display: true,
                    labelString: 'DateTime'
                },
                ticks: {
                    major: {
                        fontStyle: 'bold',
                        fontColor: '#FF0000'
                    }
                }
            }];

            const yAxes = [{
                display: true,
                scaleLabel: {
                    display: true,
                    labelString: 'Memory in MB'
                }
            }];

            const options = {
                responsive: true,
                title: {
                    display: true,
                    text: 'Memory Usage in MB'
                },
                scales: { xAxes, yAxes	}
            };

            const HEAP_USED_INDEX = 0,
                HEAP_TOTAL_INDEX = 1,
                RSS_INDEX = 2,
                EXTERNAL_INDEX = 3;

            const config = {
                type: 'line', options,
                data: {	datasets: [ datasetHeapUsed, datasetHeapTotal, datasetRSS, datasetExternal ] }
            };

            window.onload = function() {
                let ctx = document.getElementById('canvas').getContext('2d');
                window.myLine = new Chart(ctx, config);
            };

        </script>

        <!-- Update Chart Data -->
        <script>
      
            let newPointInterval = setInterval(getMemoryUsageData, 5000);

            function getMemoryUsageData() {
                $.get("/memory").done(updateMemoryUsageData)
                .fail(console.error);
            }

            function updateMemoryUsageData(result) {
                let { memoryUsage } = result;
                let heapUsedInMb = memoryUsage.heapUsed/1024/1024;
                let heapTotalInMb = memoryUsage.heapTotal/1024/1024;
                let rssInMb = memoryUsage.rss/1024/1024;
                let externalInMb = memoryUsage.external/1024/1024;
                let time = moment();
                
                console.log(`heapUsed / heapTotal = ${heapUsedInMb} / ${heapTotalInMb}`);
                updateHeapUsedDataset({ time, heapUsed: heapUsedInMb });
                updateHeapTotalDataset({ time, heapTotal: heapTotalInMb });
                updateRssDataset({ time, rss: rssInMb });
                updateExternalDataset({ time, external: externalInMb});       
                updateLines();
            }

            function updateHeapUsedDataset({ time, heapUsed }) {
                updateDataset({ index: HEAP_USED_INDEX, x: time, y: heapUsed});
            };

            function updateHeapTotalDataset({ time, heapTotal }) {
                updateDataset({ index: HEAP_TOTAL_INDEX, x: time, y: heapTotal});
            };

            function updateRssDataset({ time, rss }) {
                updateDataset({ index: RSS_INDEX, x: time, y: rss});
            }

            function updateExternalDataset({ time, external }) {
                updateDataset({ index: EXTERNAL_INDEX, x: time, y: external});
            }

            function updateDataset({ index, x,y }) {
                if (config.data.datasets.length > index) {
                    config.data.datasets[index].data.push({ x,y });
                }
            }
         
            function updateLines() {
                window.myLine.update();
            }

            $("#pauseResume").click(clearOrRedefineInterval);

            function clearOrRedefineInterval(e) {
                if ( $(e.target).text() === "Pause" ) {
                    $(e.target).text("Resume");
                    clearInterval(newPointInterval);
                } else {
                    $(e.target).text("Pause");
                    newPointInterval = setInterval(getMemoryUsageData, 5000);
                }
            }
            
        </script>
    </body>

</html>
